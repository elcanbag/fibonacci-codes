<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <title>CubeSat API Dashboard</title>
    <!-- Tailwind CSS from CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Chart.js from CDN (for charts) -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body class="bg-gray-100">
<div id="app" class="min-h-screen flex flex-col"></div>

<script>
    // ================== BASE URL ==================
    const BASE_URL = "http://localhost/api";

    // ================== GLOBAL VARIABLES ==================
    let currentUser = {
        username: null,
        password: null
    };

    // On page load, check if there's a saved user in localStorage
    document.addEventListener("DOMContentLoaded", () => {
        const savedUsername = localStorage.getItem("username");
        const savedPassword = localStorage.getItem("password");
        if (savedUsername && savedPassword) {
            currentUser.username = savedUsername;
            currentUser.password = savedPassword;
            renderDashboardPage();
        } else {
            renderAuthPage();
        }
    });

    // ================== UTILITY: Format Data as Table ==================
    function formatDataAsTable(data) {
        if (Array.isArray(data)) {
            if (data.length === 0) return "<p>No data found.</p>";
            let keys = Object.keys(data[0]).filter(k => k !== "id");
            let table = `
          <div class="overflow-x-auto">
            <table class="min-w-full border border-gray-300">
              <thead>
                <tr>`;
            keys.forEach(key => {
                table += `<th class="border px-4 py-2 bg-gray-100">${key}</th>`;
            });
            table += `</tr>
              </thead>
              <tbody>`;
            data.forEach(obj => {
                table += `<tr>`;
                keys.forEach(key => {
                    table += `<td class="border px-4 py-2">${obj[key]}</td>`;
                });
                table += `</tr>`;
            });
            table += `
              </tbody>
            </table>
          </div>`;
            return table;
        } else if (typeof data === 'object' && data !== null) {
            let table = `
          <div class="overflow-x-auto">
            <table class="min-w-full border border-gray-300">
              <tbody>`;
            for (let [key, value] of Object.entries(data)) {
                if (key === "id") continue;
                table += `
              <tr>
                <td class="border px-4 py-2 font-medium bg-gray-50">${key}</td>
                <td class="border px-4 py-2">${value}</td>
              </tr>`;
            }
            table += `
              </tbody>
            </table>
          </div>`;
            return table;
        }
        return `<p>${data}</p>`;
    }

    // ================== AUTH PAGES (LOGIN / SIGN UP) ==================
    function renderAuthPage() {
        const appDiv = document.getElementById("app");
        appDiv.innerHTML = `
        <div class="flex justify-center items-center h-screen">
          <div class="bg-white shadow-md rounded px-8 pt-6 pb-8 w-full max-w-sm">
            <h2 class="text-2xl font-bold mb-6 text-center">CubeSat API Dashboard</h2>
            <div class="flex justify-center space-x-4 mb-6">
              <button id="loginBtn" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">
                Login
              </button>
              <button id="signupBtn" class="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600">
                Sign Up
              </button>
            </div>
            <div id="authFormContainer"></div>
          </div>
        </div>`;

        document.getElementById("loginBtn").addEventListener("click", renderLoginForm);
        document.getElementById("signupBtn").addEventListener("click", renderSignupForm);
    }

    function renderLoginForm() {
        const formContainer = document.getElementById("authFormContainer");
        formContainer.innerHTML = `
        <form id="loginForm" class="flex flex-col">
          <label class="mb-2 font-medium">Username</label>
          <input type="text" id="loginUsername" class="border p-2 mb-4" required />

          <label class="mb-2 font-medium">Password</label>
          <input type="password" id="loginPassword" class="border p-2 mb-4" required />

          <div class="flex items-center mb-4">
            <input type="checkbox" id="rememberMe" class="mr-2" />
            <label for="rememberMe">Remember me</label>
          </div>

          <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">
            Login
          </button>
        </form>`;

        document.getElementById("loginForm").addEventListener("submit", async (e) => {
            e.preventDefault();
            const username = document.getElementById("loginUsername").value;
            const password = document.getElementById("loginPassword").value;
            const rememberMe = document.getElementById("rememberMe").checked;
            try {
                const response = await fetch(`${BASE_URL}/user/login`, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ username, password })
                });
                if (!response.ok) {
                    alert("Login failed. Check your credentials.");
                    return;
                }
                currentUser.username = username;
                currentUser.password = password;
                if (rememberMe) {
                    localStorage.setItem("username", username);
                    localStorage.setItem("password", password);
                }
                renderDashboardPage();
            } catch (error) {
                console.error("Login error:", error);
                alert("An error occurred during login.");
            }
        });
    }

    function renderSignupForm() {
        const formContainer = document.getElementById("authFormContainer");
        formContainer.innerHTML = `
        <form id="signupForm" class="flex flex-col">
          <label class="mb-2 font-medium">Username</label>
          <input type="text" id="signupUsername" class="border p-2 mb-4" required />

          <label class="mb-2 font-medium">Password</label>
          <input type="password" id="signupPassword" class="border p-2 mb-4" required />

          <label class="mb-2 font-medium">Registration Type</label>
          <select id="registrationType" class="border p-2 mb-4">
            <option value="register">Register with CubeSat</option>
            <option value="signup">Sign Up with CubeSat</option>
          </select>

          <!-- Container for extra field -->
          <div id="extraFieldContainer" class="mb-4"></div>

          <button type="submit" class="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600">
            Sign Up
          </button>
        </form>`;

        // Show additional field based on selected registration type
        const regTypeSelect = document.getElementById("registrationType");
        const extraFieldContainer = document.getElementById("extraFieldContainer");

        function updateExtraField() {
            if (regTypeSelect.value === "register") {
                extraFieldContainer.innerHTML = `
            <label class="mb-2 font-medium">CubeSat Name</label>
            <input type="text" id="cubeSatName" class="border p-2" required />`;
            } else {
                extraFieldContainer.innerHTML = `
            <label class="mb-2 font-medium">Access Token</label>
            <input type="text" id="accessToken" class="border p-2" required />`;
            }
        }

        regTypeSelect.addEventListener("change", updateExtraField);
        updateExtraField(); // initial update

        document.getElementById("signupForm").addEventListener("submit", async (e) => {
            e.preventDefault();
            const username = document.getElementById("signupUsername").value;
            const password = document.getElementById("signupPassword").value;
            const regType = document.getElementById("registrationType").value;
            let url = "";
            let body = {};

            if (regType === "register") {
                // Register with CubeSat: requires cubeSatName field
                const cubeSatName = document.getElementById("cubeSatName").value;
                url = `${BASE_URL}/user/register-cubesat`;
                body = { username, password, cubeSatName };
            } else {
                // Sign Up with CubeSat: requires accessToken field
                const accessToken = document.getElementById("accessToken").value;
                url = `${BASE_URL}/user/signup-with-cubesat`;
                body = { username, password, accessToken };
            }

            try {
                const response = await fetch(url, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(body)
                });
                if (!response.ok) {
                    alert("Sign up failed. Please check your details.");
                    return;
                }
                const data = await response.json();
                if (regType === "register") {
                    // Display the access token with a copy button
                    formContainer.innerHTML = `
              <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative" role="alert">
                <strong class="font-bold">${data.message}</strong>
                <span class="block sm:inline"> Access Token: <code id="accessTokenDisplay" class="bg-gray-200 p-1 rounded">${data.accessToken}</code></span>
                <button id="copyTokenBtn" class="ml-2 bg-blue-500 text-white px-2 py-1 rounded">Copy</button>
              </div>
              <div class="mt-4">
                <button id="backToLoginBtn" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">Back to Login</button>
              </div>`;
                    document.getElementById("copyTokenBtn").addEventListener("click", () => {
                        const tokenText = document.getElementById("accessTokenDisplay").innerText;
                        navigator.clipboard.writeText(tokenText).then(() => {
                            alert("Token copied to clipboard!");
                        }, () => {
                            alert("Failed to copy token.");
                        });
                    });
                    document.getElementById("backToLoginBtn").addEventListener("click", renderLoginForm);
                } else {
                    alert("Sign up successful! You can now log in.");
                    renderLoginForm();
                }
            } catch (error) {
                console.error("Signup error:", error);
                alert("An error occurred during sign up.");
            }
        });
    }

    // ================== DASHBOARD PAGE ==================
    function renderDashboardPage() {
        const appDiv = document.getElementById("app");
        appDiv.innerHTML = `
        <!-- Navbar -->
        <nav class="bg-blue-700 p-4 flex justify-between items-center">
          <div class="text-white text-xl font-bold">CubeSat API Dashboard</div>
          <div>
            <button id="logoutBtn" class="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600">
              Logout
            </button>
          </div>
        </nav>
        <!-- Buttons below navbar -->
        <div class="bg-gray-200 p-4 flex space-x-4">
          <button id="simpleDataBtn" class="bg-white px-4 py-2 rounded hover:bg-gray-100">
            Simple Data
          </button>
          <button id="diagramBtn" class="bg-white px-4 py-2 rounded hover:bg-gray-100">
            Diagram & Statistics
          </button>
        </div>
        <!-- Main content area -->
        <div class="p-4" id="contentArea">
          <div class="mb-4 flex justify-between items-center">
            <h2 class="text-lg font-bold">Latest Data</h2>
            <button id="refreshLatestBtn" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">
              Refresh Data
            </button>
          </div>
          <div id="latestDataContainer" class="bg-white p-4 rounded shadow">
            Loading data...
          </div>
        </div>
        <!-- Footer -->
        <footer class="bg-gray-100 text-center text-sm text-gray-500 mt-auto p-4">
          © 2025 CubeSat API Dashboard. All rights reserved.
        </footer>`;

        document.getElementById("logoutBtn").addEventListener("click", handleLogout);
        document.getElementById("simpleDataBtn").addEventListener("click", renderSimpleData);
        document.getElementById("diagramBtn").addEventListener("click", renderDiagramStatistics);
        document.getElementById("refreshLatestBtn").addEventListener("click", fetchLatestData);

        // Fetch latest data on initial load
        fetchLatestData();
    }

    function handleLogout() {
        localStorage.removeItem("username");
        localStorage.removeItem("password");
        currentUser = { username: null, password: null };
        renderAuthPage();
    }

    // ================== SIMPLE DATA SECTION ==================
    function renderSimpleData() {
        const contentArea = document.getElementById("contentArea");
        contentArea.innerHTML = `
        <div class="mb-4 flex justify-between items-center">
          <h2 class="text-lg font-bold">Latest Data</h2>
          <button id="refreshLatestBtn" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">
            Refresh Data
          </button>
        </div>
        <div id="latestDataContainer" class="bg-white p-4 rounded shadow mb-6">
          Loading data...
        </div>
        <hr class="my-4" />
        <div class="mb-2 font-semibold">Get Records by Date Range</div>
        <div class="flex space-x-2 mb-4">
          <input type="datetime-local" id="startDate" class="border p-2" />
          <input type="datetime-local" id="endDate" class="border p-2" />
          <button id="fetchRecordsBtn" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">
            Get Records
          </button>
        </div>
        <div id="recordsContainer" class="bg-white p-4 rounded shadow">
          No data yet.
        </div>`;

        document.getElementById("refreshLatestBtn").addEventListener("click", fetchLatestData);
        document.getElementById("fetchRecordsBtn").addEventListener("click", fetchRecordsByDate);
        fetchLatestData();
    }

    async function fetchLatestData() {
        const container = document.getElementById("latestDataContainer");
        if (container) container.innerHTML = "Loading data...";
        try {
            const response = await fetch(`${BASE_URL}/cubesat/latest`, {
                headers: {
                    "Authorization": "Basic " + btoa(currentUser.username + ":" + currentUser.password)
                }
            });
            if (!response.ok) {
                container.innerHTML = "Failed to fetch latest data.";
                return;
            }
            const data = await response.json();
            container.innerHTML = formatDataAsTable(data);
        } catch (error) {
            console.error("Error fetching latest data:", error);
            container.innerHTML = "Error fetching data.";
        }
    }

    async function fetchRecordsByDate() {
        const startDate = document.getElementById("startDate").value;
        const endDate = document.getElementById("endDate").value;
        const container = document.getElementById("recordsContainer");
        container.innerHTML = "Loading...";
        const url = `${BASE_URL}/cubesat/records?start=${startDate}&end=${endDate}`;
        try {
            const response = await fetch(url, {
                headers: {
                    "Authorization": "Basic " + btoa(currentUser.username + ":" + currentUser.password)
                }
            });
            if (!response.ok) {
                container.innerHTML = "Failed to fetch records.";
                return;
            }
            const data = await response.json();
            container.innerHTML = formatDataAsTable(data);
        } catch (error) {
            console.error("Error fetching records:", error);
            container.innerHTML = "Error fetching records.";
        }
    }

    // ================== DIAGRAM & STATISTICS SECTION ==================
    function renderDiagramStatistics() {
        const contentArea = document.getElementById("contentArea");
        contentArea.innerHTML = `
        <div class="mb-4 font-bold text-lg">Diagram & Statistics</div>
        <div class="mb-2 font-semibold">Select Date Range for Charts</div>
        <div class="flex space-x-2 mb-4">
          <input type="datetime-local" id="chartStartDate" class="border p-2" />
          <input type="datetime-local" id="chartEndDate" class="border p-2" />
          <select id="chartType" class="border p-2">
            <option value="temperature">Temperature, Humidity, Pressure</option>
            <option value="acceleration">Acceleration (X, Y, Z)</option>
            <option value="alt_sat">Altitude & Satellite</option>
          </select>
          <button id="fetchChartBtn" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">
            Generate Chart
          </button>
        </div>
        <div class="bg-white p-4 rounded shadow">
          <canvas id="myChart"></canvas>
        </div>`;

        document.getElementById("fetchChartBtn").addEventListener("click", fetchChartData);
    }

    async function fetchChartData() {
        const startDate = document.getElementById("chartStartDate").value;
        const endDate = document.getElementById("chartEndDate").value;
        const type = document.getElementById("chartType").value;
        const url = `${BASE_URL}/graph/cubesat-data/json?start=${startDate}&end=${endDate}&type=${type}`;
        try {
            const response = await fetch(url, {
                headers: {
                    "Authorization": "Basic " + btoa(currentUser.username + ":" + currentUser.password)
                }
            });
            if (!response.ok) {
                alert("Failed to fetch chart data.");
                return;
            }
            const data = await response.json();
            const labels = data.timestamps || [];
            let datasets = [];
            if (type === "acceleration") {
                datasets = [
                    {
                        label: "X Axis",
                        data: data.x || [],
                        borderColor: "rgba(255, 99, 132, 1)",
                        backgroundColor: "rgba(255, 99, 132, 0.2)",
                        fill: false,
                        tension: 0.1
                    },
                    {
                        label: "Y Axis",
                        data: data.y || [],
                        borderColor: "rgba(54, 162, 235, 1)",
                        backgroundColor: "rgba(54, 162, 235, 0.2)",
                        fill: false,
                        tension: 0.1
                    },
                    {
                        label: "Z Axis",
                        data: data.z || [],
                        borderColor: "rgba(75, 192, 192, 1)",
                        backgroundColor: "rgba(75, 192, 192, 0.2)",
                        fill: false,
                        tension: 0.1
                    }
                ];
            } else if (type === "alt_sat") {
                datasets = [
                    {
                        label: "Altitude",
                        data: data.alt || [],
                        borderColor: "rgba(153, 102, 255, 1)",
                        backgroundColor: "rgba(153, 102, 255, 0.2)",
                        fill: false,
                        tension: 0.1
                    },
                    {
                        label: "Satellite",
                        data: data.sat || [],
                        borderColor: "rgba(255, 159, 64, 1)",
                        backgroundColor: "rgba(255, 159, 64, 0.2)",
                        fill: false,
                        tension: 0.1
                    }
                ];
            } else {
                // type "temperature"
                datasets = [
                    {
                        label: "Temperature",
                        data: data.temperature || [],
                        borderColor: "rgba(255, 99, 132, 1)",
                        backgroundColor: "rgba(255, 99, 132, 0.2)",
                        fill: false,
                        tension: 0.1
                    },
                    {
                        label: "Humidity",
                        data: data.humidity || [],
                        borderColor: "rgba(54, 162, 235, 1)",
                        backgroundColor: "rgba(54, 162, 235, 0.2)",
                        fill: false,
                        tension: 0.1
                    },
                    {
                        label: "Pressure",
                        data: data.pressure || [],
                        borderColor: "rgba(75, 192, 192, 1)",
                        backgroundColor: "rgba(75, 192, 192, 0.2)",
                        fill: false,
                        tension: 0.1
                    }
                ];
            }
            drawMultiLineChart(labels, datasets);
        } catch (error) {
            console.error("Error fetching chart data:", error);
            alert("Error fetching chart data.");
        }
    }

    let myChartInstance = null;
    function drawMultiLineChart(labels, datasets) {
        const ctx = document.getElementById("myChart").getContext("2d");
        if (myChartInstance) {
            myChartInstance.destroy();
        }
        myChartInstance = new Chart(ctx, {
            type: "line",
            data: {
                labels: labels,
                datasets: datasets
            },
            options: {
                responsive: true,
                scales: {
                    x: {
                        display: true,
                        title: { display: true, text: "Timestamp" }
                    },
                    y: {
                        display: true,
                        title: { display: true, text: "Value" }
                    }
                }
            }
        });
    }
</script>
</body>
</html>
